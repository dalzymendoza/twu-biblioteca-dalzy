/***************************************************************
 * #1 Who checked out the book 'The Hobbitâ€™ 
 ***************************************************************/

-- Query
SELECT member.id, member.name 
FROM member, book, checkout_item 
WHERE member.id = checkout_item.member_id 
AND book.id = checkout_item.book_id 
AND book.title = "the hobbit" COLLATE NOCASE 
ORDER BY member.id ASC;

-- Answer
-- 1 | Anand Beck

/***************************************************************
 * #2 How many people have not checked out anything?
 ***************************************************************/

-- Query
SELECT COUNT(*)
FROM member 
WHERE member.id NOT IN 
	(SELECT member_id FROM checkout_item 
	WHERE checkout_item.member_id = member.id);

-- Answer
-- 37

/***************************************************************
 * #3 What books and movies aren't checked out?
 ***************************************************************/

-- Query
SELECT "Book" AS item_type, book.id, book.title 
FROM book
WHERE NOT EXISTS (SELECT * FROM checkout_item WHERE checkout_item.book_id = book.id)

UNION

SELECT "Movie" AS item_type, movie.id, movie.title FROM movie
WHERE NOT EXISTS (SELECT * FROM checkout_item WHERE checkout_item.movie_id = movie.id)

ORDER BY item_type ASC;

-- Answer
-- Book|2|Fellowship of the Ring
-- Book|6|1984
-- Book|7|Tom Sawyer
-- Book|8|Catcher in the Rye
-- Book|9|To Kill a Mockingbird
-- Book|10|Domain Driven Design
-- Movie|6|Thin Red Line
-- Movie|7|Crouching Tiger, Hidden Dragon
-- Movie|8|Lawrence of Arabia
-- Movie|9|Office Space

/***************************************************************
 * #4 Add the book 'The Pragmatic Programmer', and add yourself as a member. 
 * Check out 'The Pragmatic Programmer'. 
 * Use your query from question 1 to verify that you have checked it out. 
 * Also, provide the SQL used to update the database. 
 ***************************************************************/

-- Query
INSERT INTO book (id, title) VALUES ("The Pragmatic Programmer");

INSERT INTO member(id, name) VALUES ("Dalzy Mendoza");

INSERT INTO checkout_item(member_id, book_id)
SELECT member.id, book.id
FROM member, book
WHERE member.name = "Dalzy Mendoza" COLLATE NOCASE
AND book.title = "The Pragmatic Programmer" COLLATE NOCASE;

SELECT member.id, member.name 
FROM member, book, checkout_item 
WHERE member.id = checkout_item.member_id 
AND book.id = checkout_item.book_id 
AND book.title = "the pragmatic programmer" COLLATE NOCASE 
ORDER BY member.id ASC;

-- Answer
-- 43|Dalzy Mendoza

/***************************************************************
 * #5 Who has checked out more than 1 item? 
 ***************************************************************/

-- Query
SELECT id, name
FROM member
WHERE id IN
	(SELECT member_id
	FROM checkout_item 
	GROUP BY member_id
	HAVING COUNT(*) > 1)
ORDER BY id ASC;

-- Answer
-- 1|Anand Beck
-- 6|Frank Smith